name: Build Windows App (Complete)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Check for icon file
      run: |
        if (Test-Path "gestor-calificaciones.ico") {
          Write-Host "✓ Icon found: gestor-calificaciones.ico"
          $env:ICON_OPTION = "--icon gestor-calificaciones.ico"
        } else {
          Write-Host "⚠ WARNING: Icon file not found, continuing without icon"
          $env:ICON_OPTION = ""
        }
    
    - name: Build with PyInstaller
      run: |
        $iconArg = if ($env:ICON_OPTION) { $env:ICON_OPTION } else { "" }
        
        Write-Host "Building executable with PyInstaller..."
        pyinstaller --onefile --console `
          --name "Gestor_Calificaciones_Aules" `
          $iconArg `
          --hidden-import=bs4 `
          --hidden-import=tqdm `
          --hidden-import=requests `
          --hidden-import=urllib.parse `
          --hidden-import=json `
          --hidden-import=re `
          --hidden-import=time `
          --hidden-import=os `
          --hidden-import=sys `
          --hidden-import=argparse `
          --hidden-import=pydoc `
          calificaciones_aules.py
        
        Write-Host "✓ Executable built successfully"
    
    - name: Test executable
      run: |
        Write-Host "Testing executable..."
        if (Test-Path "dist/Gestor_Calificaciones_Aules.exe") {
          Write-Host "✓ Executable found: dist/Gestor_Calificaciones_Aules.exe"
          # Test that the executable runs (should show help/version)
          & "dist/Gestor_Calificaciones_Aules.exe" --help 2>$null || & "dist/Gestor_Calificaciones_Aules.exe" /? 2>$null || Write-Host "Executable created but may need data file to run properly"
        } else {
          Write-Host "✗ Executable not found!"
          exit 1
        }
    
    - name: Create portable package
      run: |
        Write-Host "Creating portable package..."
        
        # Create portable directory
        $portableDir = "GestorCalificacionesAules-Portable"
        New-Item -ItemType Directory -Path $portableDir -Force | Out-Null
        
        # Copy executable
        Copy-Item "dist/Gestor_Calificaciones_Aules.exe" "$portableDir/"
        
        # Create sample data file
        $sampleData = @"
{
  "base_url": "https://aules.edu.gva.es/docent",
  "username": "tu_usuario",
  "password": "tu_contraseña",
  "course_id": 12345,
  "configuracion_global": {
    "aggregation": 10,
    "aggregateonlygraded": false,
    "grademax": 10,
    "gradepass": 5
  },
  "categoria_padre": "RA CE FEE",
  "categorias_hijas": [
    {
      "nombre": "RA1: [Descripción del primer resultado de aprendizaje]",
      "elementos": [
        {
          "nombre": "CE1.1: [Primer criterio de evaluación]"
        },
        {
          "nombre": "CE1.2: [Segundo criterio de evaluación]"
        }
      ]
    }
  ]
}
"@
        $sampleData | Out-File -FilePath "$portableDir/datos_aules_ejemplo.json" -Encoding UTF8
        
        # Create README
        $readme = @"
# Gestor de Calificaciones Aules

## Instrucciones de uso:

1. Renombra 'datos_aules_ejemplo.json' a 'datos_aules.json'
2. Edita el archivo 'datos_aules.json' con tus datos reales
3. Ejecuta 'Gestor_Calificaciones_Aules.exe'

## Opciones del menú:
- 0: Generar estructura básica JSON local
- 1: Crear nueva estructura online
- 2: Actualizar cálculos y pesos
- 3: Eliminar estructura
- 4: Ayuda/Créditos
- 5: Salir

## Requisitos:
- Conexión a Internet
- Credenciales de Aules válidas
- ID del curso (número de 6 dígitos)

## Soporte:
- Versión: 0.6
- Fecha: 24/09/2025
- Autores: Manuel Sanchez (Nelo) y David Martinez
"@
        $readme | Out-File -FilePath "$portableDir/README.txt" -Encoding UTF8
        
        Write-Host "✓ Portable package created: $portableDir"
    
    - name: Create ZIP archive
      run: |
        Write-Host "Creating ZIP archive..."
        Compress-Archive -Path "GestorCalificacionesAules-Portable" -DestinationPath "GestorCalificacionesAules-Portable.zip" -Force
        Write-Host "✓ ZIP archive created: GestorCalificacionesAules-Portable.zip"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-app-complete
        path: |
          dist/Gestor_Calificaciones_Aules.exe
          GestorCalificacionesAules-Portable.zip
        retention-days: 30
    
    - name: Show file sizes
      run: |
        Write-Host "=== FILE SIZES ==="
        if (Test-Path "dist/Gestor_Calificaciones_Aules.exe") {
          $exeSize = (Get-Item "dist/Gestor_Calificaciones_Aules.exe").Length
          Write-Host "Executable: $([math]::Round($exeSize/1MB, 2)) MB"
        }
        if (Test-Path "GestorCalificacionesAules-Portable.zip") {
          $zipSize = (Get-Item "GestorCalificacionesAules-Portable.zip").Length
          Write-Host "Portable ZIP: $([math]::Round($zipSize/1MB, 2)) MB"
        }
